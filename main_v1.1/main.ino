/* 
  Sketch generated by the Arduino IoT Cloud Thing "HousePlantWateringSystem"
  https://create.arduino.cc/cloud/things/7bc9da9e-0867-466e-a634-ba0d9639e29c 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float durationWaterPumpOn;
  float humidity;
  float temperature;
  int dailyWaterPumpCount;
  int lightIntensity;
  int soilMoisture;
  int soilMoistureThreshold;
  bool pumpTrigger;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include <DHT.h>
#include <Wire.h>
#include <BH1750.h>

// ===============================================================
// DHT11 Sensor Setup
// ===============================================================
#define DHTPIN 17
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// ===============================================================
// Soil Moisture Sensor Pin
// ===============================================================
#define SOIL_MOISTURE_PIN 34

// ===============================================================
// Light Sensor
// ===============================================================
BH1750 lightMeter;

// ===============================================================
// Relay Signal to trigger Water Pump
// ===============================================================
#define RELAY_SIGNAL D11
unsigned long pumpStartTime = 0; // Stores the time when the pump was turned on

// ===============================================================
// Timer setup
// ===============================================================
unsigned long lastUpdate = 0;
const long UPDATE_INTERVAL = 3000; // 3 seconds

// ===============================================================
// Related to connecting to cloud
// ===============================================================
int LED_GREEN = D12; // Need to check which pins can do the signal correctly
bool connectedToCloud = false;
unsigned long lastUpdateConnecting = 0;
const long CONNECTING_INTERVAL = 10000; // 10 seconds, delay when still in the process in connecting to cloud

// ===============================================================
// Main program
// ===============================================================
void setup() {
  Serial.begin(115200);
  dht.begin();
  Wire.begin(21, 22);
  lightMeter.begin();

  pinMode(RELAY_SIGNAL, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  
  digitalWrite(RELAY_SIGNAL, HIGH); // Ensure that the water pump is off by default
  digitalWrite(LED_GREEN, LOW); // Ensure light indicator for connection is off by default
  
  

  // Initialize cloud properties and start cloud connection
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();  // Run cloud service
  
  if (ArduinoCloud.connected()) {
    

    // Reset connected to cloud and timer variables
    if (connectedToCloud == false) {
      Serial.println("Connected to Arduino Cloud...");
      digitalWrite(LED_GREEN, HIGH);
      connectedToCloud = true;
      lastUpdateConnecting = 0;
      
    }

    bool isGoodToRun = checkDelay(lastUpdate, UPDATE_INTERVAL);

    if(isGoodToRun == true) {
      sendSensorData();
      lastUpdate = millis();
    };
    
  } else {
    // Reset connected to cloud and timer variables
    connectedToCloud = false;
    lastUpdate = 0;
    
    bool isGoodToRun = checkDelay(lastUpdateConnecting, CONNECTING_INTERVAL);
    if (isGoodToRun == true) {
      Serial.println("Trying to connect to Arduino Cloud...");
      lastUpdateConnecting = millis();
      digitalWrite(LED_GREEN, LOW);
      
    };
    
  };
}

// ===============================================================
// Helper functions
// ===============================================================
/*
  Check whether time has passed based on the given interval.
*/
bool checkDelay(long previousMillis, long interval) {
   unsigned long currentMillis = millis();
  return {currentMillis - lastUpdate >= interval};
}

/*
Reading the data in the sensors
*/
void sendSensorData() {
  // Read temperature
  float temp = dht.readTemperature();
  if (!isnan(temp)) {
    Serial.print("Temp: ");
    Serial.println(temp);
    temperature = temp;
  } else {
    Serial.println("Failed to read temperature");
  }

  // Read humidity
  float humidityVal = dht.readHumidity();
  if (!isnan(humidityVal)) {
    Serial.print("Humidity: ");
    Serial.println(humidityVal);
    humidity = humidityVal;
  } else {
    Serial.println("Failed to read humidity");
  }

  // Read light level
  float lux = lightMeter.readLightLevel();
  if (!isnan(lux)) {
    Serial.print("Light: ");
    Serial.println(lux);
    lightIntensity = lux;
  } else {
    Serial.println("Failed to read light intensity");
  }

  // Read soil moisture
  int soilRaw = analogRead(SOIL_MOISTURE_PIN);
  Serial.println("\n");
  Serial.println("Raw soil moisture reading: " + String(soilRaw));
  Serial.println("\n");
  int soilPercent = map(soilRaw, 3056, 1622, 0, 100);
  soilPercent = constrain(soilPercent, 0, 100);
  Serial.println("Soil Moisture: " + String(soilPercent)+"%");
  soilMoisture = soilPercent;

  autoTriggerWaterPumpFromSoilMoistureThreshold(soilPercent);
  
}

/*
  Turns the water pump on/off depending on the current reading of the soil moisture
*/
void autoTriggerWaterPumpFromSoilMoistureThreshold(int soilPercent) {
  if (soilPercent < soilMoistureThreshold) {
    if (!pumpTrigger){
      Serial.println("Auto turning water pump on");
      digitalWrite(RELAY_SIGNAL, LOW);
      pumpTrigger = true;
  
      pumpStartTime = millis();
    };
    
  } else if (pumpTrigger){ //Only turns the pump off if it's not off in the first place
    Serial.println("Auto turning water pump off");
    digitalWrite(RELAY_SIGNAL, HIGH);
    pumpTrigger = false;

    float elapsedTime = (millis() - pumpStartTime) / 1000.0;
    elapsedTime = round(elapsedTime * 10) / 10.0; // Round to 1 decimal place

    Serial.print("Total pump runtime: ");
    Serial.print(elapsedTime);
    Serial.println(" seconds");

    durationWaterPumpOn = elapsedTime;
    
  };
}

// ===============================================================
// Below were auto generated functions from the cloud
// ===============================================================

/*
  Since SoilMoistureThreshold is READ_WRITE variable, onSoilMoistureThresholdChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoistureThresholdChange()  {
  // Add your code here to act upon SoilMoistureThreshold change
}

/*
  Since WateringPeriod is READ_WRITE variable, onWateringPeriodChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWateringPeriodChange()  {
  // Add your code here to act upon WateringPeriod change
}

/*
  Since PumpTrigger is READ_WRITE variable, onPumpTriggerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPumpTriggerChange()  {
  Serial.println(pumpTrigger);

  if (pumpTrigger) {
    Serial.println("Turning on relay");
    digitalWrite(RELAY_SIGNAL, LOW);
  } else {
    Serial.println("Turning off relay");
    digitalWrite(RELAY_SIGNAL, HIGH);\
  };
}

