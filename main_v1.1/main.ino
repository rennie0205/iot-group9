/* 
  Sketch generated by the Arduino IoT Cloud Thing "HousePlantWateringSystem"
  https://create.arduino.cc/cloud/things/7bc9da9e-0867-466e-a634-ba0d9639e29c 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float temperature;
  int dailyWaterPumpCount;
  int dailyWaterUsed;
  int lightIntensity;
  int soilMoisture;
  int soilMoistureThreshold;
  int wateringPeriod;
  bool erroneousAlert;
  bool manualPumpTrigger;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include <DHT.h>
#include <Wire.h>
#include <BH1750.h>

// DHT11 Sensor Setup
#define DHTPIN 17
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// Soil Moisture Sensor Pin
#define SOIL_MOISTURE_PIN 34

// Light Sensor
BH1750 lightMeter;

// Relay Signal to trigger Water Pump
#define RELAY_SIGNAL D11

// Timer setup
unsigned long lastUpdate = 0;
const long UPDATE_INTERVAL = 5000; // 5 seconds

// Related to connecting to cloud
// #define LED_GREEN D6 // Need to check which pins can do the signal correctly
bool connectedToCloud = false;
unsigned long lastUpdateConnecting = 0;
const long CONNECTING_INTERVAL = 10000; // 3 seconds, delay when still in the process in connecting to cloud

void setup() {
  Serial.begin(115200);
  dht.begin();
  Wire.begin(21, 22);
  lightMeter.begin();

  pinMode(RELAY_SIGNAL, OUTPUT);
  // pinMode(LED_GREEN, OUTPUT);
  
  digitalWrite(RELAY_SIGNAL, HIGH); // Ensure that the water pump is off by default
  // digitalWrite(LED_GREEN, LOW); // Ensure light indicator for connection is off by default
  
  

  // Initialize cloud properties and start cloud connection
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();  // Run cloud service
  
  if (ArduinoCloud.connected()) {
    

    // Reset connected to cloud and timer variables
    if (connectedToCloud == false) {
      Serial.println("Connected to Arduino Cloud...");
      // digitalWrite(LED_GREEN, HIGH);
      connectedToCloud = true;
      lastUpdateConnecting = 0;
      
    }

    bool isGoodToRun = checkDelay(lastUpdate, UPDATE_INTERVAL);

    if(isGoodToRun == true) {
      sendSensorData();
      lastUpdate = millis();
    };
    
  } else {
    // Reset connected to cloud and timer variables
    connectedToCloud = false;
    lastUpdate = 0;
    // digitalWrite(LED_GREEN, LOW);
    
    bool isGoodToRun = checkDelay(lastUpdate, CONNECTING_INTERVAL);
    if (isGoodToRun == true) {
      Serial.println("Trying to connect to Arduino Cloud...");
      lastUpdateConnecting = millis();
    };
    
  };
}

/*
  Check whether time has passed based on the given interval.
*/
bool checkDelay(long previousMillis, long interval) {
   unsigned long currentMillis = millis();
  return {currentMillis - lastUpdate >= interval};
}

void triggerManualPump() {
  if (manualPumpTrigger == true) {
    Serial.println("Turning on relay");
    digitalWrite(RELAY_SIGNAL, LOW);
    manualPumpTrigger = true;
  } else {
    Serial.println("Turning off relay");
    digitalWrite(RELAY_SIGNAL, HIGH);
    manualPumpTrigger = false;
  };
}

/*
Reading the data in the sensors
*/
void sendSensorData() {
  // Read temperature
  float temp = dht.readTemperature();
  if (!isnan(temp)) {
    Serial.print("Temp: ");
    Serial.println(temp);
    temperature = temp;
  } else {
    Serial.println("Failed to read temperature");
  }

  // Read humidity
  float humidityVal = dht.readHumidity();
  if (!isnan(humidityVal)) {
    Serial.print("Humidity: ");
    Serial.println(humidityVal);
    humidity = humidityVal;
  } else {
    Serial.println("Failed to read humidity");
  }

  // Read light level
  float lux = lightMeter.readLightLevel();
  if (!isnan(lux)) {
    Serial.print("Light: ");
    Serial.println(lux);
    lightIntensity = lux;
  } else {
    Serial.println("Failed to read light intensity");
  }

  // Read soil moisture
  int soilRaw = analogRead(SOIL_MOISTURE_PIN);
  int soilPercent = map(soilRaw, 3720, 1500, 0, 100);
  soilPercent = constrain(soilPercent, 0, 100);
  Serial.print("Soil Moisture: ");
  Serial.println(soilPercent);
  soilMoisture = soilPercent;
}

// Below were generated functions from the cloud

/*
  Since Moisture is READ_WRITE variable, onMoistureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMoistureChange()  {
  // Add your code here to act upon Moisture change
}

/*
  Since LightIntensity is READ_WRITE variable, onLightIntensityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLightIntensityChange()  {
  // Add your code here to act upon LightIntensity change
}


/*
  Since BatteryPower is READ_WRITE variable, onBatteryPowerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBatteryPowerChange()  {
  // Add your code here to act upon BatteryPower change
}

/*
  Since SoilMoisture is READ_WRITE variable, onSoilMoistureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoistureChange()  {
  // Add your code here to act upon SoilMoisture change
}

/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}

/*
  Since ManualPumpTrigger is READ_WRITE variable, onManualPumpTriggerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onManualPumpTriggerChange()  {
  // Add your code here to act upon ManualPumpTrigger change

  Serial.println(manualPumpTrigger);

  if (manualPumpTrigger) {
    Serial.println("Turning on relay");
    digitalWrite(RELAY_SIGNAL, LOW);
  } else {
    Serial.println("Turning off relay");
    digitalWrite(RELAY_SIGNAL, HIGH);
  };
}

/*
  Since SoilMoistureThreshold is READ_WRITE variable, onSoilMoistureThresholdChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoistureThresholdChange()  {
  // Add your code here to act upon SoilMoistureThreshold change
}

/*
  Since WateringPeriod is READ_WRITE variable, onWateringPeriodChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWateringPeriodChange()  {
  // Add your code here to act upon WateringPeriod change
}

/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}





